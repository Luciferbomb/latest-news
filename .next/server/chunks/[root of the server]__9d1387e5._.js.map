{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/ashutoshranjan/test/latest-news/src/app/api/youtube/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\n\n// YouTube API key - in production, this should be in environment variables\nconst YOUTUBE_API_KEY = process.env.YOUTUBE_API_KEY || 'AIzaSyCmsFreWdDFd0nAb3cG8lPCSCWrQBgrB_s';\n\n// Define VideoType interface\ninterface VideoType {\n  id: string;\n  title: string;\n  description: string;\n  thumbnailUrl: string;\n  videoUrl: string;\n  embedUrl: string;\n  source: string;\n  channelId: string;\n  channelUrl: string;\n  date: string;\n  cacheDomain?: string; // To track which domain the video is from for daily rotation\n}\n\n// Cache object to store videos with timestamp\nlet videoCache: {\n  timestamp: number;\n  videos: VideoType[];\n  domainRotationDate: string; // To track when domains were last rotated\n} = {\n  timestamp: 0,\n  videos: [],\n  domainRotationDate: ''\n};\n\n// AI-related YouTube channel IDs - focusing on latest AI/tech content creators\nconst AI_CHANNELS = [\n  'UCbfYPyITQ-7l4upoX8nvctg', // Two Minute Papers\n  'UC8wZnXYK_CGKlBcZp-GxYPA', // AI Explained\n  'UCgBVkKC1MsaZHVBWdmjJ_Wg', // Ripley AI\n  'UCdj9K0dcfBVbDlJsQ8Rp2bQ', // Builder's Central\n  'UCJIfeSCssxSC_Dhc5s7woww', // Matt Wolfe\n  'UCv83tO5cePwHMt1952IVVHw', // Prompt Engineering\n  'UCG-DIzZxEv1hGm7ItSFEooQ', // AI Foundations\n  'UCUyeluBRhGPCW4rPe_UvBZQ', // AI Advantage\n  'UC7vVhkEfw4nOGp8TyDk7RcQ', // Google DeepMind\n  'UC0NHbHOxkYPLDG5xq9UW-Vg', // Sentdex\n  'UCZHmQk67mSJgfCCTn7xBfew', // Yannic Kilcher\n  'UC_m2zRI-S9Qm4SXlQUFz5-A', // AIKorner\n  'UCDPM_n1atn2ijUwHd0NNRQw', // Lex Fridman\n];\n\n// AI tools and tech specific keywords for better filtering\nconst AI_TOOL_KEYWORDS = [\n  'ai tool', 'ai agent', 'chatgpt', 'claude', 'gemini', 'llama', 'mistral',\n  'gpt-4', 'gpt4', 'gpt-5', 'gpt5', 'ai assistant', 'ai coding', 'copilot',\n  'midjourney', 'stable diffusion', 'dall-e', 'ai image', 'ai art',\n  'diffusion model', 'text-to-image', 'text-to-video', 'ai video',\n  'anthropic', 'openai', 'hugging face', 'meta ai', 'google ai',\n  'machine learning tool', 'neural network', 'large language model',\n  'llm', 'ai api', 'ai development', 'ai app', 'ai workflow',\n  'ai productivity', 'ai automation', 'ai extension', 'ai plugin',\n  'ai code', 'ai programming', 'ai for developers', 'ai browser',\n  'ai search', 'ai writing', 'ai summarize', 'ai research', 'ai news'\n];\n\nexport async function GET(request: Request) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const query = searchParams.get('q') || 'artificial intelligence tools';\n    const forceRefresh = searchParams.get('refresh') === 'true';\n    \n    console.log('Fetching YouTube videos...');\n    \n    // Check if we need to rotate domains (daily)\n    const today = new Date().toDateString();\n    const shouldRotateDomains = today !== videoCache.domainRotationDate;\n    \n    // Use cache if it's less than 6 hours old and no force refresh is requested\n    const cacheAge = Date.now() - videoCache.timestamp;\n    if (!forceRefresh && videoCache.videos.length > 0 && cacheAge < 6 * 60 * 60 * 1000) {\n      console.log('Using cached YouTube videos');\n      \n      // If we need to rotate domains, do it with the cached videos\n      let videos = [...videoCache.videos];\n      if (shouldRotateDomains) {\n        videos = randomizeDomainVideos(videos);\n        videoCache.domainRotationDate = today;\n        videoCache.videos = videos;\n      }\n      \n      return NextResponse.json({\n        videos: videos.slice(0, 15),\n        lastUpdated: new Date(videoCache.timestamp).toISOString(),\n        fromCache: true\n      }, { status: 200 });\n    }\n    \n    // If cache is empty or stale, fallback to hardcoded videos to prevent errors\n    const fallbackVideos = getFallbackVideos();\n    \n    // API key validation\n    if (!YOUTUBE_API_KEY || YOUTUBE_API_KEY === 'AIzaSyCmsFreWdDFd0nAb3cG8lPCSCWrQBgrB_s') {\n      console.warn('Using sample YouTube data - no valid API key found');\n      \n      // Update cache with fallback videos\n      videoCache = {\n        timestamp: Date.now(),\n        videos: fallbackVideos,\n        domainRotationDate: today\n      };\n      \n      return NextResponse.json({\n        videos: fallbackVideos,\n        lastUpdated: new Date().toISOString(),\n        fromFallback: true,\n        notice: \"Using sample data - YouTube API key not configured\"\n      }, { status: 200 });\n    }\n    \n    // Prepare to store all video results\n    let allVideos: VideoType[] = [];\n    let apiSuccess = false;\n    \n    try {\n      // Enhanced query with AI tool keywords for better results\n      const enhancedQuery = `${query} ${AI_TOOL_KEYWORDS.slice(0, 3).join(' OR ')}`;\n      \n      // First approach: Search for videos with the enhanced query\n      const searchResponse = await fetch(\n        `https://www.googleapis.com/youtube/v3/search?part=snippet&q=${encodeURIComponent(enhancedQuery)}&type=video&maxResults=20&relevanceLanguage=en&key=${YOUTUBE_API_KEY}&videoDuration=medium&order=date&publishedAfter=${encodeURIComponent(new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString())}`\n      );\n      \n      if (searchResponse.ok) {\n        const searchData = await searchResponse.json();\n        apiSuccess = true;\n        \n        // Extract videos from search results\n        const searchVideos = searchData.items.map((item: any) => ({\n          id: item.id.videoId,\n          title: item.snippet.title,\n          description: item.snippet.description,\n          thumbnailUrl: item.snippet.thumbnails.high?.url || item.snippet.thumbnails.medium?.url || item.snippet.thumbnails.default?.url,\n          videoUrl: `https://www.youtube.com/watch?v=${item.id.videoId}`,\n          embedUrl: `https://www.youtube.com/embed/${item.id.videoId}?autoplay=0`,\n          source: item.snippet.channelTitle,\n          channelId: item.snippet.channelId,\n          channelUrl: `https://www.youtube.com/channel/${item.snippet.channelId}`,\n          date: new Date(item.snippet.publishedAt).toLocaleDateString('en-US', {\n            year: 'numeric',\n            month: 'short',\n            day: 'numeric'\n          }),\n          cacheDomain: 'search'\n        }));\n        \n        allVideos = [...allVideos, ...searchVideos];\n      } else {\n        console.warn('YouTube search API failed, status:', searchResponse.status);\n      }\n      \n      // Second approach: Get latest videos from AI-focused channels (more reliable)\n      // Only fetch from 5 random channels to avoid quota limits\n      const shuffledChannels = [...AI_CHANNELS].sort(() => 0.5 - Math.random()).slice(0, 5);\n      \n      const channelRequests = shuffledChannels.map(channelId => \n        fetch(`https://www.googleapis.com/youtube/v3/search?part=snippet&channelId=${channelId}&order=date&maxResults=3&type=video&key=${YOUTUBE_API_KEY}`)\n          .then(res => {\n            if (res.ok) {\n              apiSuccess = true;\n              return res.json();\n            }\n            return { items: [] };\n          })\n          .catch(() => ({ items: [] }))\n      );\n      \n      const channelResults = await Promise.all(channelRequests);\n      \n      // Process each channel's videos\n      channelResults.forEach((result, index) => {\n        if (result.items && result.items.length > 0) {\n          const channelId = shuffledChannels[index];\n          const channelVideos = result.items.map((item: any) => ({\n            id: item.id.videoId,\n            title: item.snippet.title,\n            description: item.snippet.description,\n            thumbnailUrl: item.snippet.thumbnails.high?.url || item.snippet.thumbnails.medium?.url || item.snippet.thumbnails.default?.url,\n            videoUrl: `https://www.youtube.com/watch?v=${item.id.videoId}`,\n            embedUrl: `https://www.youtube.com/embed/${item.id.videoId}?autoplay=0`,\n            source: item.snippet.channelTitle,\n            channelId: item.snippet.channelId,\n            channelUrl: `https://www.youtube.com/channel/${item.snippet.channelId}`,\n            date: new Date(item.snippet.publishedAt).toLocaleDateString('en-US', {\n              year: 'numeric',\n              month: 'short',\n              day: 'numeric'\n            }),\n            cacheDomain: channelId\n          }));\n          \n          allVideos = [...allVideos, ...channelVideos];\n        }\n      });\n      \n      // If API calls failed completely, use fallback videos or cached content\n      if (!apiSuccess) {\n        console.log('All YouTube API calls failed, using fallbacks');\n        \n        // If we have cached videos, use them even if they're older than 6 hours\n        if (videoCache.videos.length > 0) {\n          console.log('Using older cached videos as fallback');\n          return NextResponse.json({\n            videos: videoCache.videos.slice(0, 15),\n            lastUpdated: new Date(videoCache.timestamp).toISOString(),\n            fromCache: true,\n            notice: \"Unable to fetch fresh videos, showing cached content\"\n          }, { status: 200 });\n        }\n        \n        // If no cache, use hardcoded fallback videos\n        allVideos = fallbackVideos;\n      }\n      \n      // Remove duplicates (same video ID)\n      const uniqueVideos = Array.from(\n        new Map(allVideos.map(video => [video.id, video])).values()\n      );\n      \n      // Filter for AI tools and tech content\n      const aiToolsVideos = uniqueVideos.filter(video => {\n        const content = `${video.title.toLowerCase()} ${video.description.toLowerCase()}`;\n        return AI_TOOL_KEYWORDS.some(keyword => content.includes(keyword.toLowerCase()));\n      });\n      \n      // If filtering is too strict and removed too many videos, use original list\n      const filteredVideos = aiToolsVideos.length > 5 ? aiToolsVideos : uniqueVideos;\n      \n      // Sort by date (most recent first)\n      filteredVideos.sort((a, b) => {\n        return new Date(b.date).getTime() - new Date(a.date).getTime();\n      });\n      \n      // Randomize videos from the same domain/channel for daily rotation\n      const finalVideos = shouldRotateDomains ? \n        randomizeDomainVideos(filteredVideos) : \n        filteredVideos;\n      \n      // Update the cache\n      videoCache = {\n        timestamp: Date.now(),\n        videos: finalVideos,\n        domainRotationDate: today\n      };\n      \n      return NextResponse.json({\n        videos: finalVideos.slice(0, 15), // Return top 15 videos\n        lastUpdated: new Date().toISOString()\n      }, { status: 200 });\n      \n    } catch (apiError) {\n      console.error('YouTube API error:', apiError);\n      \n      // If we have cached videos, use them as a fallback\n      if (videoCache.videos.length > 0) {\n        console.log('API error, using cached videos');\n        return NextResponse.json({\n          videos: videoCache.videos.slice(0, 15),\n          lastUpdated: new Date(videoCache.timestamp).toISOString(),\n          fromCache: true,\n          notice: \"Error fetching fresh videos, showing cached content\"\n        }, { status: 200 });\n      }\n      \n      // If no cache, use hardcoded fallback videos\n      return NextResponse.json({\n        videos: fallbackVideos,\n        lastUpdated: new Date().toISOString(),\n        fromFallback: true\n      }, { status: 200 });  // Still return 200 to prevent UI errors\n    }\n    \n  } catch (error: any) {\n    console.error('Error in YouTube API route:', error);\n    \n    // If we have cached videos, use them despite the error\n    if (videoCache.videos.length > 0) {\n      return NextResponse.json({\n        videos: videoCache.videos.slice(0, 15),\n        lastUpdated: new Date(videoCache.timestamp).toISOString(),\n        fromCache: true,\n        error: error.message\n      }, { status: 200 });  // Still return 200 to prevent UI errors\n    }\n    \n    // Final fallback\n    return NextResponse.json({\n      videos: getFallbackVideos(),\n      lastUpdated: new Date().toISOString(),\n      fromFallback: true,\n      error: error.message\n    }, { status: 200 });  // Still return 200 to prevent UI errors\n  }\n}\n\n// Helper function to randomize videos from the same domain/channel\nfunction randomizeDomainVideos(videos: VideoType[]): VideoType[] {\n  // Group videos by domain\n  const domainGroups: Record<string, VideoType[]> = {};\n  \n  videos.forEach(video => {\n    const domain = video.cacheDomain || video.channelId;\n    if (!domainGroups[domain]) {\n      domainGroups[domain] = [];\n    }\n    domainGroups[domain].push(video);\n  });\n  \n  // For each domain, pick a random subset of videos\n  const result: VideoType[] = [];\n  \n  Object.keys(domainGroups).forEach(domain => {\n    const domainVideos = domainGroups[domain];\n    // Shuffle the videos\n    const shuffled = [...domainVideos].sort(() => 0.5 - Math.random());\n    // Take 1-2 videos from each domain\n    const count = Math.min(domainVideos.length, domain === 'search' ? 2 : 1);\n    result.push(...shuffled.slice(0, count));\n  });\n  \n  // Re-sort by date\n  result.sort((a, b) => {\n    return new Date(b.date).getTime() - new Date(a.date).getTime();\n  });\n  \n  return result;\n}\n\n// Hard-coded fallback videos when the API completely fails\nfunction getFallbackVideos(): VideoType[] {\n  const today = new Date();\n  const formattedDate = today.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  });\n  \n  return [\n    {\n      id: \"dKVNz6nvB2s\",\n      title: \"GPT-4o: OpenAI's New Model is MINDBLOWING\",\n      description: \"The latest in AI technology - GPT-4o combines multimodal processing with fast response times.\",\n      thumbnailUrl: \"https://i.ytimg.com/vi/dKVNz6nvB2s/hqdefault.jpg\",\n      videoUrl: \"https://www.youtube.com/watch?v=dKVNz6nvB2s\",\n      embedUrl: \"https://www.youtube.com/embed/dKVNz6nvB2s?autoplay=0\",\n      source: \"AI Explained\",\n      channelId: \"UC8wZnXYK_CGKlBcZp-GxYPA\",\n      channelUrl: \"https://www.youtube.com/channel/UC8wZnXYK_CGKlBcZp-GxYPA\",\n      date: formattedDate\n    },\n    {\n      id: \"jV4EhCnA9bA\",\n      title: \"7 AI Tools That Will Replace You\",\n      description: \"AI technology is advancing rapidly. These 7 AI tools could potentially replace human jobs.\",\n      thumbnailUrl: \"https://i.ytimg.com/vi/jV4EhCnA9bA/hqdefault.jpg\",\n      videoUrl: \"https://www.youtube.com/watch?v=jV4EhCnA9bA\",\n      embedUrl: \"https://www.youtube.com/embed/jV4EhCnA9bA?autoplay=0\",\n      source: \"Matt Wolfe\",\n      channelId: \"UCJIfeSCssxSC_Dhc5s7woww\",\n      channelUrl: \"https://www.youtube.com/channel/UCJIfeSCssxSC_Dhc5s7woww\",\n      date: formattedDate\n    },\n    {\n      id: \"5VG-_P5M9zI\",\n      title: \"Claude 3.5 Sonnet is OUT!\",\n      description: \"Anthropic released Claude 3.5 Sonnet, their most capable model yet. Here's everything you need to know.\",\n      thumbnailUrl: \"https://i.ytimg.com/vi/5VG-_P5M9zI/hqdefault.jpg\",\n      videoUrl: \"https://www.youtube.com/watch?v=5VG-_P5M9zI\",\n      embedUrl: \"https://www.youtube.com/embed/5VG-_P5M9zI?autoplay=0\",\n      source: \"AI Explained\",\n      channelId: \"UC8wZnXYK_CGKlBcZp-GxYPA\",\n      channelUrl: \"https://www.youtube.com/channel/UC8wZnXYK_CGKlBcZp-GxYPA\",\n      date: formattedDate\n    },\n    {\n      id: \"LFEE8Mi_BnI\",\n      title: \"5 Midjourney Prompting Techniques You Need to Know\",\n      description: \"Master Midjourney with these 5 essential prompting techniques for better AI image generation.\",\n      thumbnailUrl: \"https://i.ytimg.com/vi/LFEE8Mi_BnI/hqdefault.jpg\",\n      videoUrl: \"https://www.youtube.com/watch?v=LFEE8Mi_BnI\",\n      embedUrl: \"https://www.youtube.com/embed/LFEE8Mi_BnI?autoplay=0\",\n      source: \"Prompt Engineering\",\n      channelId: \"UCv83tO5cePwHMt1952IVVHw\",\n      channelUrl: \"https://www.youtube.com/channel/UCv83tO5cePwHMt1952IVVHw\",\n      date: formattedDate\n    },\n    {\n      id: \"JXqH6U5fxqA\",\n      title: \"Google Gemini Advanced vs ChatGPT 4o vs Claude 3 Opus\",\n      description: \"Comparing the top AI models: Google Gemini Advanced, ChatGPT 4o, and Claude 3 Opus. Which one is best?\",\n      thumbnailUrl: \"https://i.ytimg.com/vi/JXqH6U5fxqA/hqdefault.jpg\",\n      videoUrl: \"https://www.youtube.com/watch?v=JXqH6U5fxqA\",\n      embedUrl: \"https://www.youtube.com/embed/JXqH6U5fxqA?autoplay=0\",\n      source: \"Ripley AI\",\n      channelId: \"UCgBVkKC1MsaZHVBWdmjJ_Wg\",\n      channelUrl: \"https://www.youtube.com/channel/UCgBVkKC1MsaZHVBWdmjJ_Wg\",\n      date: formattedDate\n    },\n    {\n      id: \"SOjaGQEOmws\",\n      title: \"Mastering ChatGPT for Coding: Complete Guide\",\n      description: \"Learn how to use ChatGPT effectively for coding tasks, from simple scripts to complex projects.\",\n      thumbnailUrl: \"https://i.ytimg.com/vi/SOjaGQEOmws/hqdefault.jpg\",\n      videoUrl: \"https://www.youtube.com/watch?v=SOjaGQEOmws\",\n      embedUrl: \"https://www.youtube.com/embed/SOjaGQEOmws?autoplay=0\",\n      source: \"Builder's Central\",\n      channelId: \"UCdj9K0dcfBVbDlJsQ8Rp2bQ\",\n      channelUrl: \"https://www.youtube.com/channel/UCdj9K0dcfBVbDlJsQ8Rp2bQ\",\n      date: formattedDate\n    },\n    {\n      id: \"jV4_CULnQnU\",\n      title: \"AutoGen: Microsoft's Revolutionary AI Agents Framework\",\n      description: \"Microsoft AutoGen allows multi-agent conversations that can solve complex tasks autonomously.\",\n      thumbnailUrl: \"https://i.ytimg.com/vi/jV4_CULnQnU/hqdefault.jpg\",\n      videoUrl: \"https://www.youtube.com/watch?v=jV4_CULnQnU\",\n      embedUrl: \"https://www.youtube.com/embed/jV4_CULnQnU?autoplay=0\",\n      source: \"AI Foundations\",\n      channelId: \"UCG-DIzZxEv1hGm7ItSFEooQ\",\n      channelUrl: \"https://www.youtube.com/channel/UCG-DIzZxEv1hGm7ItSFEooQ\",\n      date: formattedDate\n    },\n    {\n      id: \"DkIIaHOiN1g\",\n      title: \"The Truth About AI Vision Models: How Good Are They Really?\",\n      description: \"An in-depth analysis of the current state of AI vision models, their capabilities and limitations.\",\n      thumbnailUrl: \"https://i.ytimg.com/vi/DkIIaHOiN1g/hqdefault.jpg\",\n      videoUrl: \"https://www.youtube.com/watch?v=DkIIaHOiN1g\",\n      embedUrl: \"https://www.youtube.com/embed/DkIIaHOiN1g?autoplay=0\",\n      source: \"Two Minute Papers\",\n      channelId: \"UCbfYPyITQ-7l4upoX8nvctg\",\n      channelUrl: \"https://www.youtube.com/channel/UCbfYPyITQ-7l4upoX8nvctg\",\n      date: formattedDate\n    }\n  ];\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 502, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}