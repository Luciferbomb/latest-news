{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 60, "column": 0}, "map": {"version":3,"sources":["file:///Users/ashutoshranjan/test/latest-news/src/app/api/image-generation/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\n\n// API keys - in production, these should be in environment variables\nconst OPENAI_API_KEY = process.env.OPENAI_API_KEY;\nconst LEXICA_API_URL = 'https://lexica.art/api/v1/search';\n\nexport async function GET(request: Request) {\n  try {\n    const { searchParams } = new URL(request.url);\n    const query = searchParams.get('q') || 'artificial intelligence image generation';\n    \n    // Add AI image generation focus to the query\n    const enhancedQuery = `${query} AI generated art, high quality, detailed`;\n    \n    // Try to use OpenAI API if available\n    if (OPENAI_API_KEY) {\n      try {\n        const response = await fetch('https://api.openai.com/v1/images/generations', {\n          method: 'POST',\n          headers: {\n            'Authorization': `Bearer ${OPENAI_API_KEY}`,\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            model: \"dall-e-3\",\n            prompt: enhancedQuery,\n            n: 1,\n            size: \"1024x1024\"\n          })\n        });\n\n        if (response.ok) {\n          const data = await response.json();\n          if (data.data && data.data.length > 0) {\n            return NextResponse.json({\n              images: data.data.map((img: any) => ({\n                id: Math.random().toString(36).substring(2),\n                url: img.url,\n                prompt: enhancedQuery,\n                width: 1024,\n                height: 1024\n              }))\n            }, { status: 200 });\n          }\n        }\n        // If OpenAI API fails, fall through to fallback\n      } catch (openaiError) {\n        console.error('Error with OpenAI image generation:', openaiError);\n        // Continue to fallback\n      }\n    }\n    \n    // Log the fallback\n    console.log(`Using fallback images with query: ${enhancedQuery}`);\n    \n    // Return AI-focused fallback images\n    return NextResponse.json({ \n      images: getAIFocusedImages(query)\n    }, { status: 200 });\n  } catch (error: any) {\n    console.error('Error fetching images:', error);\n    \n    // Return fallback images if API call fails\n    return NextResponse.json({ \n      images: getAIFocusedImages(),\n      error: error.message \n    }, { status: 200 });\n  }\n}\n\n// AI-focused images for when the API is unavailable\nfunction getAIFocusedImages(query = 'artificial intelligence') {\n  // Collection of high-quality AI-related images focused on image generation\n  const aiImages = [\n    {\n      id: 'ai-gen-1',\n      url: 'https://images.unsplash.com/photo-1620712943543-bcc4688e7485?q=80&w=1965&auto=format&fit=crop',\n      width: 1965,\n      height: 1310,\n      prompt: 'AI image generation visualization',\n      source: 'Unsplash'\n    },\n    {\n      id: 'ai-gen-2',\n      url: 'https://images.unsplash.com/photo-1677442135968-6db3d0aa9bf5?q=80&w=2070&auto=format&fit=crop',\n      width: 2070,\n      height: 1380,\n      prompt: 'DALL-E generated art',\n      source: 'Unsplash'\n    },\n    {\n      id: 'ai-gen-3',\n      url: 'https://images.unsplash.com/photo-1675271591211-728bc2c0c995?q=80&w=2187&auto=format&fit=crop',\n      width: 2187,\n      height: 1458,\n      prompt: 'Midjourney AI art creation',\n      source: 'Unsplash'\n    },\n    {\n      id: 'ai-gen-4',\n      url: 'https://images.pexels.com/photos/8386440/pexels-photo-8386440.jpeg',\n      width: 5000,\n      height: 3333,\n      prompt: 'AI-generated landscape art',\n      source: 'Pexels'\n    },\n    {\n      id: 'ai-gen-5',\n      url: 'https://images.pexels.com/photos/8386434/pexels-photo-8386434.jpeg',\n      width: 5000,\n      height: 3333,\n      prompt: 'Stable Diffusion artwork',\n      source: 'Pexels'\n    },\n    {\n      id: 'ai-gen-6',\n      url: 'https://images.unsplash.com/photo-1684469499849-3db7d9e04c06?q=80&w=1964&auto=format&fit=crop',\n      width: 1964,\n      height: 1309,\n      prompt: 'AI art generation process',\n      source: 'Unsplash'\n    }\n  ];\n  \n  // Add the query to each image's prompt to make it seem more relevant\n  return aiImages.map(img => ({\n    ...img,\n    prompt: `${img.prompt} - ${query}`\n  }));\n}\n\n// POST endpoint for generating images with specific prompts\nexport async function POST(request: Request) {\n  try {\n    const body = await request.json();\n    const prompt = body.prompt;\n    \n    if (!prompt) {\n      return NextResponse.json(\n        { error: 'Prompt is required' },\n        { status: 400 }\n      );\n    }\n    \n    console.log(`Generating image with DALL-E for prompt: ${prompt}`);\n    \n    // Call the OpenAI API to generate an image\n    const response = await fetch('https://api.openai.com/v1/images/generations', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${OPENAI_API_KEY}`,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        model: \"dall-e-3\",\n        prompt: prompt,\n        n: 1,\n        size: \"1024x1024\"\n      })\n    });\n    \n    if (!response.ok) {\n      const errorData = await response.json();\n      console.error('OpenAI API error:', errorData);\n      throw new Error(`OpenAI API error: ${response.status} - ${errorData.error?.message || 'Unknown error'}`);\n    }\n    \n    const data = await response.json();\n    \n    // Transform the OpenAI response to our format\n    const generatedImages = data.data.map((image: any, index: number) => ({\n      id: `openai-${Date.now()}-${index}`,\n      url: image.url,\n      width: 1024,\n      height: 1024,\n      prompt: prompt,\n      source: 'DALL-E'\n    }));\n    \n    return NextResponse.json({ \n      images: generatedImages,\n      prompt: prompt\n    }, { status: 200 });\n  } catch (error: any) {\n    console.error('Error generating images:', error);\n    \n    return NextResponse.json({ \n      images: getAIFocusedImages().slice(0, 1),\n      error: error.message \n    }, { status: 200 });\n  }\n}\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 248, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}